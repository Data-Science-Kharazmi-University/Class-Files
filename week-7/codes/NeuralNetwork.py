# -*- coding: utf-8 -*-
"""Untitled60.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/177I14MPIFhriKxgfBs553v-ol7g_BMC3
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

from sklearn.neural_network  import MLPClassifier

X_train = np.array([[1, 1],[2, 3],[2,1.5], [3, 3], [6, 6], [7, 7], [7, 8], [8,9]])
y_train = np.array([0, 0, 0, 0, 1, 1, 1, 1])

col = np.where(y_train == 1 ,'b','r')
plt.scatter(X_train[:,0],X_train[:,1],c = col)

model = MLPClassifier(hidden_layer_sizes= 10 ,activation='relu',solver = 'adam', verbose = True)

model.fit(X_train,y_train)

model.score(X_train,y_train)

X_test = np.array([[3,4],[5,7]])
y_test = np.array([0,1])
y_pred = model.predict(X_test)
model.score(X_test,y_test)

"""***Download MNIST by sklearn***"""

from sklearn.datasets import fetch_openml

X,y = fetch_openml('mnist_784', version=1, return_X_y=True)

X.shape

X_train, X_test = X[:60000], X[60000:]
y_train, y_test = y[:60000], y[60000:]

model = MLPClassifier(hidden_layer_sizes= 50 ,max_iter= 50 ,solver = 'adam', verbose = True)

model.fit(X_train,y_train)

from sklearn.metrics import accuracy_score

print("test accuracy = ", accuracy_score(y_test,model.predict(X_test)))
print("train accuracy = ", accuracy_score(y_train,model.predict(X_train)))

from sklearn.metrics import ConfusionMatrixDisplay

y = model.fit(X_train, y_train)
ConfusionMatrixDisplay.from_estimator(y, X_test, y_test)

data = pd.read_csv("diabetes.csv")

X= data.iloc[:,0:8]
X.head(5)
y = data.iloc[:,8]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

model = MLPClassifier(hidden_layer_sizes= [50,50], max_iter= 200 ,solver='adam',verbose = True)

model.fit(X_train,y_train)

model.score(X_test,y_test)

y = model.fit(X_train, y_train)
ConfusionMatrixDisplay.from_estimator(y, X_test, y_test)

"""***Download MNIST by tensorflow /implement Neural network by tensorflow***"""

import tensorflow as tf

from keras.datasets import mnist

# Load the MNIST dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Print 4 images in a row
plt.figure(figsize=(10, 5))
for i in range(4):
    plt.subplot(1, 4, i+1)
    plt.imshow(X_train[i], cmap='gray')
    plt.title(f"Label: {y_train[i]}")
    plt.axis('off')
plt.tight_layout()
plt.show()

print(X_train.shape)

print(len(X_test))

model = tf.keras.models.Sequential()

model.add(tf.keras.layers.Flatten(input_shape = (28,28)))

model.add(tf.keras.layers.Dense(128, activation = 'relu'))
model.add(tf.keras.layers.Dense(128, activation = 'relu'))
model.add(tf.keras.layers.Dense(10, activation = 'softmax'))

model.compile(optimizer = 'adam',  loss='sparse_categorical_crossentropy',  metrics=['accuracy'])

model.fit(X_train, y_train, epochs=5 , verbose  = True)

loss, accuracy = model.evaluate(X_test, y_test)

loss, accuracy = model.evaluate(X_train, y_train)