# -*- coding: utf-8 -*-
"""Untitled45.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xtGXawt249L5ibkKRM1RRlfMchmoAqMb
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""**Plot**"""

x = [1,2,5,6]
y = [1,4,25, 36]
plt.plot(x,y)

x = [1,5,2,6]
y = [1,25,4,36]
plt.plot(x,y)

x = [1,5,2,6]
y = [1,25,4,36]
plt.plot(x,y,'ro')

"""**Histoghram**"""

x = np.random.randn(100)
plt.hist(x,edgecolor = "white")

x = np.random.randn(1000)
plt.hist(x,edgecolor = "white")

d1 = pd.read_csv("student-dataset.csv")
d1

d1.columns

plt.hist(d1["math.grade"],edgecolor="white")

plt.hist(d1['gender'] edgecolor="white")

plt.hist(d1['nationality'],edgecolor="white")

plt.hist(d1['nationality'],edgecolor="white", orientation='horizontal')

d1.nationality.unique()

d1.groupby(["nationality"]).size()

len(d1.nationality.unique())

plt.hist(d1['nationality'],edgecolor="white", bins = 31, orientation='horizontal')

x = d1.groupby(["nationality"]).size()
x.plot(kind='bar')

x = d1.groupby(["portfolio.rating"]).size()
x.plot(kind='bar')

#plt.bar(x, height, width, bottom, align)

# creating the dataset
data = {'C':20, 'C++':15, 'Java':30,
        'Python':35}
courses = list(data.keys())
values = list(data.values())

# creating the bar plot
plt.bar(courses, values, color ='maroon',
        width = 0.4)

d2 = d1.describe()

l = d2.columns
m = d2.loc["mean",:]
print(l)
print(m)

plt.bar(l,m)

fig = plt.figure(figsize =(10, 7))
plt.bar(l,m)

d2 = d2.drop(columns = ['id'])

l = d2.columns
m = d2.loc["mean",:]
plt.barh(l,m)

np.random.seed(10)
data = np.random.normal(100, 20, 200)

fig = plt.figure(figsize =(10, 7))

# Creating plot
plt.boxplot(data)

"""**Boxplot**"""

x = plt.boxplot(d1['math.grade'])

plt.boxplot(d1['latitude'])
plt.show()

data = pd.read_csv("diabetes.csv")
data.head(5)

plt.subplot(2,3,1)
plt.boxplot(data["Glucose"])
plt.show()

fig = plt.figure(figsize =(10, 7))
plt.subplot(2,3,1)
plt.boxplot(data["Glucose"])
plt.title("Glucose")
plt.subplot(2,3,2)
plt.boxplot(data["BloodPressure"])
plt.title("BloodPressure")
plt.subplot(2,3,3)
plt.boxplot(data["SkinThickness"])
plt.title("SkinThickness")
plt.subplot(2,3,4)
plt.boxplot(data["Insulin"])
plt.title("Insulin")
plt.subplot(2,3,5)
plt.boxplot(data["BMI"])
plt.title("BMI")
plt.subplot(2,3,6)
plt.boxplot(data["Age"])
plt.title("Age")
plt.show()

fig = plt.figure(figsize =(10, 7))
plt.subplot(2,2,1)
plt.boxplot(data["Insulin"])
plt.title("Insulin boxplot")
plt.subplot(2,2,2)
plt.hist(data["Insulin"])
plt.title("Insulin histogram")
plt.subplot(2,2,3)
plt.boxplot(data["Glucose"])
plt.title("Glucose boxplot")
plt.subplot(2,2,4)
plt.hist(data["Glucose"])
plt.title("Glucose histogram")
plt.show

data.Outcome.value_counts()

xd = data[data.Outcome == 1]["Glucose"].tolist()
xnd = data.loc[data.Outcome == 0]["Glucose"].tolist()
xd

class_data = pd.DataFrame({'Diabeties' : [xd], 'Normal':[xnd]})
class_data

plt.boxplot(
    # A data frame needs to be converted to an array before it can be plotted this way
    np.array(class_data),
    # You can use the column headings from the data frame as labels
    labels=list(class_data)
)
plt.show()

import seaborn as sns

sns.set_style("whitegrid")
sns.boxplot(data, x='Outcome', y='Glucose')

sns.set_style("whitegrid")
sns.boxplot(data, x='Outcome', y='BMI', palette="Set1")

sns.set_style("whitegrid")
sns.boxplot(data, x='Outcome', y='BloodPressure', hue= "Outcome", palette="Set1", )

sns.set(style='whitegrid')
sns.boxplot(data, x='Outcome', y='Age', palette="Set1")

sns.countplot(d1 , x="portfolio.rating")

sns.countplot(d1 , x="refletter.rating")

d1.columns

data.columns

"""**Scatter plot**"""

plt.scatter(data.Glucose,data.Insulin)

plt.plot(data.Glucose,data.Insulin,'go')

plt.scatter(data.BMI,data.Glucose,marker ="^")

plt.show()

plt.scatter(data.BMI,data.Insulin)
plt.title("Scetter plot", fontdict = {"fontsize": 22 , "color" : "red"})
plt.xlabel("BMI")
plt.ylabel("Glucose")
plt.show()

col = np.where(data.Outcome == 1 ,'b','r')
plt.scatter(data.BMI,data.Glucose,c = col)
plt.title("Scetter plot")
plt.xlabel("BMI")
plt.ylabel("Glucose")

plt.show()

col = np.where(data.Outcome == 1 ,'b','r')
fig = plt.scatter(data.BloodPressure,data.Glucose, c= col)
plt.title("Scetter plot")
plt.xlabel("BloodPressure")
plt.ylabel("Glucose")
plt.savefig("scatter1.pdf")

plt.show()