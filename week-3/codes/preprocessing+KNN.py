# -*- coding: utf-8 -*-
"""Untitled49.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WSwFvEePF03UBgW4lrF2_MmYt12kDh3v
"""

import pandas as pd
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns

data = pd.read_csv("diabetes.csv")

plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(),annot=True, fmt=".2f")

data = pd.read_csv("student-dataset.csv")

data

plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(),annot=True, fmt=".2f")

"""# **Imputation of missing values**"""

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(missing_values= np.nan, strategy='mean')

x = [[1, 2], [np.nan, 3], [7, 6]]

imputer.fit(x)

y = [[np.nan, 2], [6, np.nan], [7, 6]]

print(imputer.transform(y))

"""## **Sklearn.preprocessing introduction**"""

from sklearn.preprocessing import Binarizer

X = [[ 1., -1.,  .2],
     [ 2.,  0.,  0.7],
     [ 0.8,  1., -1.]]

transformer = Binarizer(threshold = 0.6).fit(X)

X = transformer.transform(X)

X

from sklearn.preprocessing import MinMaxScaler

data = [[-1, 2], [-0.5, 6], [0, 10], [1, 18]]

data

scaler = MinMaxScaler()
scaler.fit(data)

data = scaler.transform(data)
data

data = pd.read_csv("student-dataset.csv")

data = data.drop(['id','name','city'], axis = 1)
data.head(5)

"""## **Encoding categorical data**"""

from sklearn.preprocessing import LabelEncoder

# Initializing LabelEncoder
le = LabelEncoder()

# Applying LabelEncoder on categorical columns
data['nationality'] = le.fit_transform(data['nationality'])
data['gender'] = le.fit_transform(data['gender'])

data.head(5)

plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(),annot=True, fmt=".2f")

"""# **Classification**

# **Splitting the dataset into the Training set and Test set**
"""

from sklearn.model_selection import train_test_split

x = data.iloc[:,0:9]
x.head(5)

y = data.iloc[:,9]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)
print(x_train)

"""# **KNN Classifier**"""

from sklearn.neighbors import KNeighborsClassifier

# Training the K-NN model on the Training set
KNN_classifier = KNeighborsClassifier(n_neighbors = 4, metric = 'minkowski', p = 2)
KNN_classifier.fit(x_train, y_train)

# Predicting the Test set results
y_pred = KNN_classifier.predict(x_test)
y_pred

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
print("accuracy = ", accuracy_score(y_test,y_pred))

from sklearn.metrics import ConfusionMatrixDisplay

y = KNN_classifier.fit(x_train, y_train)
ConfusionMatrixDisplay.from_estimator(y, x_test, y_test)

data['portfolio.rating'].hist()

x = data.iloc[:,[0,3,4,5,6,7,8]]